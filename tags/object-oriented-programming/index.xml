<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>object-oriented-programming on void?</title><link>https://netotz.github.io/tags/object-oriented-programming/</link><description>Recent content in object-oriented-programming on void?</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 07 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://netotz.github.io/tags/object-oriented-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>The Four Pillars of Object Oriented Programming</title><link>https://netotz.github.io/posts/four-pillars-oop/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://netotz.github.io/posts/four-pillars-oop/</guid><description>The four pillars of OOP are:
Abstraction Encapsulation Inheritance Polymorphism But before describing each, basic concepts of OOP are needed to understand.
Basic OOP Object Oriented Programming (OOP) is a programming paradigm that structures a software program into reusable pieces of code blueprints, which are called classes.
Class A class is a code template or blueprint that describes what an object is and what it does, by defining attributes to store data and implementing methods or behaviors to use that data.</description></item></channel></rss>